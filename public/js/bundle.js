/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/***/ (() => {

eval("const canvas = document.getElementById('canvas');\nconst ctx = canvas.getContext('2d');\n\nconst bg = new Image(); // 背景\nconst moon = new Image();\nbg.src = './image/bg.png';\nmoon.src = './image/moon.png';\n\nclass GameObject {\n    constructor(x, y, w, h, src) {\n        this.x = x;\n        this.y = y;\n        this.w = w;\n        this.h = h;\n        if (src) {\n            this.image = new Image();\n            this.image.src = src;\n        }\n    }\n}\n\nlet items = [];\nclass Item extends GameObject {\n    constructor(x, y) {\n        super(x, y, 36, 36, './image/fruit_grape.png');\n        this.speed = Math.random() * 5 + 2;\n        items.push(this);\n    }\n\n    move() {\n        this.x = this.x - this.speed;\n        ctx.drawImage(this.image, this.x, this.y, this.w, this.h);\n\n        if (this.x < -100) {\n            this.x = 1100;\n        }\n    }\n}\n\nfor (let i = 0; i < 3; i++) {\n    new Item(300 * Math.random() * i + 1000, 400 * Math.random());\n}\n\nlet stones = [];\nclass Stone extends GameObject {\n    constructor(x, y) {\n        super(x, y, 100, 100, './image/stone.png');\n        this.speed = Math.random() * 5 + 2;\n        stones.push(this);\n    }\n\n    move() {\n        this.x = this.x - this.speed;\n        ctx.drawImage(this.image, this.x, this.y, this.w, this.h);\n\n        if (this.x < -100) {\n            this.x = 1100;\n        }\n    }\n}\n\nfor (let i = 1; i <= 4; i++) {\n    new Stone(400 * Math.random() * i + 500, 400 * Math.random());\n}\n\nfunction addStone() {\n    for (let i = 1; i <= 3; i++) {\n        new Stone(200 * Math.random() + 1000, 500 * Math.random());\n    }\n}\n\nclass Character extends GameObject {\n    constructor() {\n        super(300, 440, 64, 64, './image/64.png');\n        this.vy = 0; // 重力\n        this.jumpPower = -15;\n        this.jumping = false; // ジャンプしているか\n        this.walking = false;\n        this.column = 1;\n        this.row = 1;\n        this.hitStone = false;\n        this.frameCount = 6; // フレームのカウント\n        this.score = 0;\n    }\n\n    draw() {\n        ctx.drawImage(\n            this.image, // スプライト画像\n            this.column * 64, // スプライト画像から切り抜く列\n            this.row * 64, // スプライト画像から切り抜く行\n            this.w, // 切り出すサイズ 幅\n            this.h, // 切り出すサイズ 高さ\n            this.x, // 書き出すx座標\n            this.y, // 書き出すy座標\n            64, // 表示サイズ 幅\n            64 // 表示サイズ 高さ\n        );\n\n        let text = \"スコア: \" + this.score;\n        ctx.font = \"24px serif\";\n        ctx.fillStyle = \"#fff\";\n        ctx.fillText(text, 0, 24);\n    }\n\n    walkRight() { // 右に歩く\n        if (this.x < 872) {\n            this.walking = true;\n            this.row = 0;\n            this.x += 10;\n        }\n    }\n\n    walkLeft() { // 左に歩く\n        if (this.x > 0) {\n            this.walking = true;\n            this.row = 0;\n            this.x -= 10;\n        }\n    }\n\n    jump() {\n        this.vy = this.jumpPower;\n        this.jumping = true;\n        this.column = 0;\n        this.row = 0;\n    }\n\n    // 障害物に当たった場合\n    hitObstacle() {\n        this.jumping = false;\n        this.hitStone = true;\n        this.column = 3; // 倒れているキャラクター\n        this.row = 1; // 倒れているキャラクター\n    }\n\n    hit() {\n        // 石に当たったかどうか\n        if (this.hitStone) {\n            this.y += 16; // キャラクターをcanvas外に移動させる。\n        }\n\n        // canvasの外側に落ちたらゲームオーバー\n        if (this.y >= canvas.height || this.y < -50) {\n            this.gameOver();\n        }\n    }\n\n    // アイテムを手に入れたか\n    getItem(item) {\n        // itemのxを再設定\n        item.x = 1100;\n        // y座標を再設定\n        item.y = 400 * Math.random();\n    }\n\n    scoreCount() {\n        this.score += 1;\n        if (this.score === 10) {\n            addStone();\n        }\n    }\n\n    gameOver() {\n        cancelAnimationFrame(interval);\n        alert('ゲームオーバー')\n        let text = \"手に入れたぶどう: \" + this.score + \"個\";\n        let ele = document.getElementsByClassName(\"score\")[0];\n        ele.innerHTML = text;\n        document.getElementById('startButton').style.display = 'none';\n        document.getElementById('restartButton').style.display = 'inline-block';\n    }\n\n    \n    update() {\n\n        // jumpしたら\n        if (this.jumping) {\n            this.y += this.vy;\n            this.vy += 1;\n            // 羽ばたくようにスプレッド画像の位置を変更\n            // frameCountが6になったら羽ばたくようにする\n            if (this.frameCount === 6) {\n                if (this.column === 1) {\n                    this.column = 2;\n                } else if(this.column === 2) {\n                    this.column = 3;\n                } else if (this.column === 3) {\n                    this.column = 2;\n                } else {\n                    this.column = 1;\n                }\n                // frameCountをリセットする\n                this.frameCount = 0;\n            }\n            this.frameCount += 1;\n        }\n\n        // 石に当たったか。\n        this.hit();\n\n        // 石\n        stones.forEach((stone, i) => { // 石とキャラの距離を測り0になったらゲームオーバー\n            const distanceX = this.x - stone.x;\n            const distanceY = this.y - stone.y;\n            // 横の距離と縦の距離が20以下ならゲームオーバー\n            if (Math.abs(distanceX) <= 30 && Math.abs(distanceY) <= 40) {\n                this.hitObstacle();\n            }\n        });\n\n        // アイテム\n        items.forEach((item, i) => { // itemを取ったか\n            const distanceX = this.x - item.x;\n            const distanceY = this.y - item.y;\n            if (Math.abs(distanceX) <= 30 && Math.abs(distanceY) <= 40) {\n                this.getItem(item);\n                this.scoreCount();\n            }\n        });\n\n        this.draw();\n    }\n}\n\nconst character = new Character;\n\nlet interval;\nfunction draw() {\n    ctx.clearRect(0, 0, 1000, 600); // canvasエリアを白紙にする\n    ctx.drawImage(bg, 0, 0, 1000, 600); // 背景を描く\n    ctx.drawImage(moon, 800, 50, 64, 64);\n    stones.forEach((stone, i) => { // 石を描画し動かす\n        stone.move();\n    });\n\n    items.forEach((item, i) => {\n        item.move();\n    });\n\n    interval = requestAnimationFrame(draw);\n    \n    character.update(); // ユニコーンを描画し続ける。\n}\n\n// ゲームスタート\ndocument.getElementById('startButton').addEventListener('click', gameStart);\nfunction gameStart() {\n    canvas.style.opacity = 1;\n    requestAnimationFrame(draw);\n\n    window.onkeydown = (event) => {\n        if (event.code === 'ArrowUp') {\n            character.jump();\n        }\n    };\n}\n\nfunction reStart() {\n    location.reload();\n}\n\nwindow.onload = () => {\n    ctx.drawImage(bg, 0, 0, 1000, 600);\n    ctx.drawImage(moon, 800, 50, 64, 64);\n}\n\n// XMLHttpRequestインスタンス作成\nconst xhr = new XMLHttpRequest();\n// 初期化\nxhr.open(\"GET\", \"./test.json\");\n// リクエストの送信\n// loadstart: リクエスト送信時, progress: データ送受信している途中\n// load: リクエスト成功時, error: リクエストエラー時\nxhr.addEventListener(\"load\", () => {\n    if (xhr.status === 200) {\n        console.log(xhr.responseText);\n    }\n});\nxhr.addEventListener(\"error\", () => {\n    console.log(\"error\");\n});\nxhr.send();\n\n\n//# sourceURL=webpack://js-2d-game/./index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./index.js"]();
/******/ 	
/******/ })()
;